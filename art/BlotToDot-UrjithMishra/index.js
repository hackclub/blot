/*
@title: BlotToDot™️
@author: Urjith Mishra
@snapshot: horse.png
*/

// Thanks to Bright Li for helping me on Slack when I needed help!

const side = 400;

setDocDimensions(side, side);

const margin = 10; // not including text
const original = [[[-24.243661880493164,242.2198486328125],[761.655029296875,242.2198486328125],[761.655029296875,1013.9763793945312],[-24.243661880493164,1013.9763793945312],[-24.243661880493164,242.2198486328125]],[[644.1695556640625,950.5499267578125],[653.4995727539062,952.4159545898438],[666.5615844726562,950.5499267578125],[675.8916015625,944.951904296875],[680.5565795898438,940.2869262695312],[678.6905517578125,937.4879150390625],[673.0925903320312,926.2918701171875],[670.2935791015625,913.2298583984375],[677.757568359375,905.7658081054688],[679.6235961914062,890.8378295898438],[673.0925903320312,865.6467895507812],[669.360595703125,836.7236938476562],[669.360595703125,802.20263671875],[667.4945678710938,777.944580078125],[654.4325561523438,762.0835571289062],[641.3705444335938,736.8925170898438],[637.6385498046875,725.6964721679688],[637.6385498046875,709.83544921875],[642.3035278320312,690.242431640625],[646.0355224609375,666.9173583984375],[649.767578125,638.9273071289062],[650.7005615234375,614.6692504882812],[648.1182250976562,591.34423828125],[640.4375,570.8181762695312],[633.906494140625,557.7561645507812],[635.7725219726562,556.8231811523438],[643.2365112304688,562.421142578125],[648.8345336914062,570.8181762695312],[659.1072387695312,587.2823486328125],[665.6285400390625,612.8032836914062],[675.8916015625,646.391357421875],[677.757568359375,655.7213745117188],[697.3506469726562,656.6543579101562],[713.211669921875,655.7213745117188],[727.2066650390625,651.0563354492188],[730.0056762695312,643.5923461914062],[722.5416870117188,619.3342895507812],[715.2943115234375,592.3338623046875],[703.8250122070312,569.0087890625],[688.95361328125,552.1581420898438],[666.5615844726562,540.962158203125],[644.1695556640625,539.0961303710938],[622.7105102539062,544.6941528320312],[608.7154541015625,540.962158203125],[582.5914306640625,532.5651245117188],[551.8023681640625,526.9671020507812],[510.7502746582031,526.0341186523438],[481.82720947265625,530.6990966796875],[451.9711608886719,535.3641357421875],[422.1151123046875,539.0961303710938],[398.7900695800781,540.0291137695312],[364.26898193359375,526.9671020507812],[339.07794189453125,511.1060791015625],[326.0158996582031,498.0440673828125],[303.6239013671875,472.8529968261719],[284.9638366699219,449.5279846191406],[261.6387939453125,422.47088623046875],[235.51475524902344,400.0788879394531],[213.12271118164062,385.1508483886719],[187.93165588378906,376.7538146972656],[163.67361450195312,370.2228088378906],[146.8795928955078,367.423828125],[133.81756591796875,353.42877197265625],[125.42053985595703,337.5677185058594],[124.16252899169922,347.06268310546875],[122.62152099609375,357.1607666015625],[117.02351379394531,345.9647521972656],[113.29149627685547,342.2327575683594],[115.15753173828125,354.3617858886719],[117.02351379394531,364.6247863769531],[102.09549713134766,369.289794921875],[90.89946746826172,377.68682861328125],[86.23445892333984,383.2848205566406],[87.16744995117188,388.8828430175781],[79.70346069335938,399.1458435058594],[84.36844635009766,399.1458435058594],[81.56946563720703,404.7438659667969],[64.7754135131836,425.2698974609375],[52.646400451660156,437.39892578125],[39.584381103515625,452.3269958496094],[26.522350311279297,470.05401611328125],[25.589332580566406,476.58502197265625],[25.589332580566406,486.38153076171875],[28.854839324951172,491.5130615234375],[31.653858184814453,498.51055908203125],[35.85238265991211,503.6420593261719],[40.51737594604492,507.840576171875],[50.78038787841797,509.2400817871094],[56.37841033935547,509.2400817871094],[61.97643280029297,508.7735595703125],[64.7754135131836,504.5750732421875],[67.10792541503906,499.9100646972656],[68.97393798828125,497.1110534667969],[78.30396270751953,492.91253662109375],[91.83248138427734,487.7810363769531],[100.69596862792969,480.3170166015625],[106.29399871826172,477.051513671875],[117.49002838134766,477.051513671875],[130.0855255126953,475.6520080566406],[138.48255920410156,468.6545104980469],[145.94656372070312,469.1210021972656],[149.67857360839844,471.4534912109375],[154.34359741210938,481.7165222167969],[160.87460327148438,501.77606201171875],[167.40562438964844,525.1011352539062],[173.93663024902344,560.0886840820312],[182.80015563964844,583.8802490234375],[186.9986572265625,593.6767578125],[187.46514892578125,621.2003173828125],[186.9986572265625,654.3218383789062],[193.9961700439453,678.1134033203125],[210.32371520996094,701.4384765625],[225.25173950195312,714.50048828125],[230.3832244873047,745.2894897460938],[233.64874267578125,778.4110717773438],[234.58172607421875,834.3912353515625],[233.64874267578125,881.5078125],[230.3832244873047,891.3043212890625],[225.25173950195312,905.7658081054688],[224.78521728515625,915.5623168945312],[215.92172241210938,927.224853515625],[209.85719299316406,933.2893676757812],[209.3907012939453,937.0213623046875],[202.39320373535156,946.3514404296875],[200.06068420410156,950.0834350585938],[203.32618713378906,953.8154296875],[210.7902069091797,954.2819213867188],[220.12022399902344,953.3489379882812],[229.91673278808594,951.9494018554688],[234.58172607421875,950.5499267578125],[235.9812469482422,948.2174072265625],[236.91424560546875,946.8179321289062],[240.1797637939453,943.5524291992188],[239.7132568359375,939.3538818359375],[235.9812469482422,934.2223510742188],[235.51475524902344,929.557373046875],[238.78025817871094,923.4928588867188],[243.4452667236328,920.69384765625],[249.62176513671875,917.671630859375],[254.3623504638672,913.5669555664062],[255.97105407714844,903.485595703125],[255.85484313964844,880.0872192382812],[255.10780334472656,847.4532470703125],[258.8398132324219,829.2597045898438],[263.5047912597656,812.93212890625],[266.7702941894531,789.140625],[270.5023193359375,755.0860595703125],[276.100341796875,730.8280029296875],[284.0413818359375,717.229248046875],[286.3493957519531,714.988037109375],[289.16241455078125,714.0339965820312],[307.82244873046875,714.50048828125],[336.27899169921875,714.50048828125],[367.06805419921875,713.5674438476562],[400.6560974121094,714.50048828125],[425.38067626953125,712.16796875],[449.1722106933594,707.0364990234375],[473.4302673339844,694.9074096679688],[488.3582763671875,687.4434204101562],[498.62127685546875,685.577392578125],[513.0828247070312,678.1134033203125],[529.8768920898438,676.7138671875],[534.0753784179688,687.4434204101562],[546.2044067382812,705.1704711914062],[559.2664184570312,731.760986328125],[572.3284301757812,756.01904296875],[581.1919555664062,776.5451049804688],[585.8569946289062,786.3416137695312],[589.5889892578125,803.1356201171875],[595.18701171875,816.1976318359375],[596.5864868164062,827.8602294921875],[596.1199951171875,856.783203125],[595.6535034179688,876.3762817382812],[591.4550170898438,889.4382934570312],[590.9884643554688,897.8353271484375],[583.0579833984375,910.4308471679688],[576.0604248046875,922.0933837890625],[569.5294189453125,931.889892578125],[568.1299438476562,936.5548706054688],[573.2614135742188,937.4879150390625],[587.7229614257812,937.4879150390625],[598.9190063476562,933.7559204101562],[602.6510009765625,928.6243896484375],[601.718017578125,923.9593505859375],[600.3184814453125,915.5623168945312],[603.1174926757812,909.4978637695312],[610.58154296875,903.8998413085938],[616.1795043945312,898.768310546875],[616.6460571289062,887.5723266601562],[617.112548828125,867.5127563476562],[617.112548828125,833.4581909179688],[620.3780517578125,809.2001342773438],[623.1770629882812,787.2745971679688],[622.7105102539062,782.609619140625],[612.447509765625,771.8800659179688],[600.7850341796875,756.9520874023438],[594.2540283203125,742.95703125],[576.5269775390625,724.7634887695312],[563.931396484375,710.302001953125],[549.9364013671875,696.3069458007812],[570.928955078125,719.1654663085938],[588.6559448242188,735.95947265625],[596.5864868164062,745.7560424804688],[603.5840454101562,761.1505737304688],[617.5790405273438,777.4780883789062],[627.3755493164062,787.7410888671875],[632.0405883789062,800.8031005859375],[636.70556640625,811.5326538085938],[646.0355834960938,825.5277099609375],[649.767578125,847.4532470703125],[653.4995727539062,863.3142700195312],[655.3656005859375,886.1727905273438],[655.8320922851562,899.2348022460938],[657.6981201171875,906.2323608398438],[656.76513671875,916.0288696289062],[653.4995727539062,923.9593505859375],[651.1671142578125,931.4234008789062],[646.0355834960938,944.0189208984375],[643.236572265625,946.8179321289062],[644.1695556640625,950.5499267578125],[644.1696166992188,950.5499267578125],[644.1695556640625,950.5499267578125]]];
const detail = 0.2; // 1 is original = no fun
const shapeRadius = 0.5; // for dots
const dotOffsetX = 0; // self-explanatory
const dotOffsetY = 1; // self-explanatory again
const numberSize = 0.3; // self-explanatory thrice

// Different shapes for different lines
const shape = (n, size, pt) => {
  const t = new bt.Turtle()
  for (let i = 0; i < n; i++) t.forward(size).right(360/n)
  bt.translate(t.path, pt);
  return t.lines()
}

// Text stuffs
// instructions.ts
var ParseCoords = (cstr, multScale = 1) => {
  const coordArray = [];
  for (const x of cstr.split(":")) {
    if (parseFloat(x)) {
      coordArray.push(parseFloat(x));
    }
  }
  return coordArray;
};
var RunInstructions = (inst, org, scale = 1) => {
  const turtle = new bt.Turtle();
  turtle.jump(org)
  for (const x of inst.split(",")) {
    const cmd = x.split("$")[0];
    const args = x.split("$")[1];
    let data;
    switch (cmd) {
      case "u":
        turtle.up();
        break;
      case "d":
        turtle.down();
        break;
      case "f":
        turtle.forward(parseFloat(args) * scale);
        break;
      case "arc":
        data = ParseCoords(args);
        turtle.arc(-data[0], data[1] * scale);
        break;
      case "jmp":
        data = ParseCoords(args);
        turtle.jump(data);
        break;
      case "sa":
        turtle.setAngle(parseFloat(args));
        break;
      case "l":
        turtle.left(parseFloat(args));
        break;
      case "r":
        turtle.right(parseFloat(args));
        break;
      default:
        break;
    }
  }
  drawLines(turtle.lines());
  return turtle.position;
};

// letters.ts
var letters = {
  // some of these instructions could definitely be minified. I will most
  // likely submit a second pr to fix some of these later
  // todo unterrible letter instructions
  a: `sa$90,f$2,r$90,f$2,r$90,f$2,u,sa$90,f$2,d,l$30,f$2,l$120,f$2`,
  b: `sa$90,f$4,r$90,f$1,arc$180:1,f$1,r$180,f$1,arc$180:1,f$1`,
  c: `sa$90,u,r$90,f$2,r$180,d,arc$180:2`,
  d: `sa$90,f$4,r$90,arc$180:2`,
  e: `sa$90,f$4,r$90,f$2,u,f$-2,r$90,f$2,l$90,d,f$2,u,f$-2,r$90,f$2,l$90,d,f$2`,
  f: `sa$90,f$4,r$90,f$2,u,f$-2,r$90,f$2,l$90,d,f$2`,
  g: `u,f$1,sa$90,f$2,r$90,d,arc$270:1,f$2,arc$90:1`,
  h: `sa$90,f$4,u,f$-2,r$90,d,f$2,u,l$90,f$-2,d,f$4`,
  i: `f$2,u,f$-1,l$90,d,f$4,r$90,u,f$-1,d,f$2`,
  j: `sa$90,u,f$4,r$90,d,f$2,u,f$-1,r$90,d,f$3,arc$90:1`,
  k: `sa$90,f$4,u,f$-2,r$45,d,f$2.75,u,f$-2.75,r$90,d,f$2.75`,
  l: `sa$90,u,f$4,r$180,d,f$4,l$90,f$2`,
  m: `sa$90,f$4,sa$0,r$71.57,f$3.162,sa$0,l$71.57,f$3.162,sa$0,r$90,f$4`,
  n: `sa$90,f$4,r$153.43,f$4.47,l$153.43,f$4`,
  o: `sa$90,u,f$1,d,f$2,arc$180:1,f$2,arc$180:1`,
  p: `sa$90,f$4,r$90,f$1,arc$180:1,f$1`,
  q: `sa$90,u,f$1,d,f$2,arc$180:1,f$2,arc$180:1,u,r$90,f$1,r$45,d,f$1.414`,
  r: `sa$90,f$4,r$90,f$1,arc$180:1,f$1,sa$-45,f$2.8284`,
  s: `f$1,arc$-180:1,arc$180:1,f$1`,
  t: `u,f$1,sa$90,d,f$4,u,r$90,f$-1,d,f$2`,
  u: `sa$90,u,f$4,sa$-90,d,f$3,arc$-180:1,f$3`,
  v: `sa$90,u,f$4,r$165.96,d,f$4.12,l$151.93,f$4.12`,
  w: `sa$90,u,f$4,sa$0,r$82.87,d,f$4.03,sa$0,l$63.43,f$1.12,sa$0,r$63.43,f$1.12,sa$0,l$82.87,f$4.03`,
  x: `sa$90,u,f$4,r$153.44,d,f$4.47,u,l$153.44,f$4,l$153.44,d,f$4.47`,
  y: `u,f$1,sa$90,d,f$2.5,r$33.69,f$1.8,u,f$-1.8,l$67.38,d,f$1.8`,
  z: `u,f$2,d,f$-2,l$63.44,f$4.47,r$63.44,f$-2`,
  ["0"]: `sa$90,u,f$1,d,f$2,arc$180:1,f$2,arc$180:1,u,f$2,arc$45:1,sa$-66.80,d,f$3.675`,
  ["1"]: (origin, scale) => DrawBezier(
    origin,
    -106,
    scale,
    bezierEasing(0.026, [0.984, -1], [1, 1], 0.9561),
    [2, -0.47],
    `f$2,u,f$-1,sa$90,d,f$4,l$90`
  ),
  ["2"]: `u,f$2,r$180,d,f$2,sa$90,arc$90:1,arc$-90:1,f$1,arc$-180:1`,
  ["3"]: `sa$90,u,f$4,r$90,d,f$1,arc$180:1,f$1,r$180,f$1,arc$180:1,f$1`,
  ["4"]: `u,f$2,sa$90,f$1,l$90,d,f$2,r$116.57,f$3.35,sa$-90,f$4`,
  ["5"]: `u,sa$90,f$1,r$180,d,arc$-180:1,f$1,arc$-90:1,arc$90:1,sa$0,f$2`,
  ["6"]: (origin, scale) => DrawBezier(
    origin,
    74,
    scale,
    bezierEasing(-0.018, [0.054, -0.373], [1, -0.758], 0.9181),
    [3.2, -0.36],
    `u,sa$90,f$1,d,arc$360:1`
  ),
  ["7"]: (origin, scale) => DrawBezier(
    origin,
    245,
    scale,
    bezierEasing(-5e-3, [0, -0.149], [0, 1], 0.206),
    [4.5, -0.59],
    `u,sa$90,f$4,r$90,d,f$2`
  ),
  ["8"]: `u,f$1,d,arc$-180:1,arc$360:1,arc$-180:1`,
  ["9"]: (origin, scale) => DrawBezier(
    origin,
    -107,
    scale,
    bezierEasing(-0.018, [0.054, -0.373], [1, -0.758], 0.9181),
    [3.2, -0.36],
    `u,sa$90,f$4,r$90,f$1,d,arc$360:1,u,arc$90:1,d`
  ),
  ["."]: `sa$90,u,f$.75,r$90,f$1,d,arc$360:.25`,
  [","]: `sa$90,u,f$.5,r$90,f$1,r$90,d,arc$90:.25`,
  ["?"]: `sa$90,u,f$.75,r$90,f$1,d,arc$360:.25,l$90,u,f$.25,d,f$1,r$90,arc$-270:1`,
  ["!"]: `sa$90,u,f$.75,r$90,f$1,d,arc$360:.25,l$90,u,f$.25,d,f$3`,
  ["+"]: `sa$90,u,f$2,r$90,d,f$2,u,f$-1,l$90,f$-1,d,f$2`,
  ["-"]: `sa$90,u,f$2,r$90,d,f$2`,
  ["*"]: `sa$90,u,f$2,r$90,f$1,l$90,f$-1,d,f$2,u,f$-1,r$60,f$-1,d,f$2,u,f$-1,r$60,f$-1,d,f$2`,
  ["/"]: `l$63.43,f$4.47`,
  ["="]: `sa$90,u,f$1.5,r$90,d,f$2,u,l$90,f$1,l$90,d,f$2`,
  ["$"]: `f$1,arc$-180:1,arc$180:1,f$1,u,f$-1,r$90,d,f$4`,
  [":"]: `sa$90,u,f$.75,r$90,f$1,d,arc$360:.25,l$90,u,f$2.5,d,r$90,arc$360:.25`,
  [";"]: `sa$90,u,f$.25,r$90,f$1,r$90,d,arc$90:.25,u,arc$270:.25,r$180,f$3,d,r$90,arc$-360:.25`,
  ["("]: `u,f$1.25,r$180,d,arc$90:.5,f$3,arc$90:.5`,
  [")"]: `u,f$.75,d,arc$-90:.5,f$3,arc$-90:.5`,
  ["["]: `u,f$1.5,r$180,d,f$1,r$90,f$4,r$90,f$1`,
  ["]"]: `u,f$.5,d,f$1,l$90,f$4,l$90,f$1`,
  ["#"]: `sa$90,u,f$1.5,r$90,d,f$2,u,l$90,f$1,l$90,d,f$2,u,r$90,f$.5,r$90,f$.5,r$90,d,f$2,u,l$90,f$1,l$90,d,f$2`,
  ["%"]: `sa$90,u,f$2,r$45,d,f$2.83,u,l$45,f$-1.5,d,arc$-360:.5,u,f$1.5,l$90,f$1.5,d,arc$-360:.5`,
  ["_"]: `f$2`,
  ["|"]: `u,f$1,sa$90,d,f$4`,
  ["\\"]: `u,f$4,r$153.43,d,f$4.47`,
  ['"']: `u,f$.5,sa$90,f$3,d,f$1,u,r$90,f$1,r$90,f$1`,
  ["'"]: `u,f$1,sa$90,f$3,d,f$1`,
  [">"]: `sa$90,u,f$1,r$63.43,d,f$2.24,l$127,f$2.24`,
  // redo
  ["<"]: `u,f$2,sa$90,f$1,l$63.43,d,f$2.24,r$127,f$2.24`,
  // specials
  [" "]: ``,
  ["\r"]: ``,
  ["\n"]: ``
};
var allLetters = Object.keys(letters).join("");

// funcs.ts
var DrawBezier = (org, ang, scale, bezfunc, curveSizes, instructions) => {
  const turtle = new bt.Turtle();
  turtle.jump(org);
  if (instructions) {
    turtle.jump(RunInstructions(instructions, org, scale));
  }
  turtle.setAngle(ang);
  turtle.forward(curveSizes[0] * scale);
  bt.resample(turtle.path, 0.1);
  warp(turtle, (x) => bezfunc(x) * curveSizes[1] * scale);
  drawLines(turtle.lines());
  return;
};

var DrawText = (text, org, scale = 100, spacing = [2.5, 4.5]) => {
  let xInd = 0;
  let yInd = 0;
  for (const x of text.toLowerCase()) {
    if (allLetters.indexOf(x, 0) == -1) {
      RunInstructions(
        letters["?"],
        [
          org[0] + xInd * spacing[0] * scale,
          org[1] - yInd * spacing[1] * scale
        ],
        scale
      );
    } else {
      switch (x) {
        case "\r":
          xInd = 0;
          continue;
        case "\n":
          xInd = 0;
          yInd += 1;
          continue;
        default:
          if (typeof letters[x] == "string") {
            RunInstructions(
              letters[x],
              [
                org[0] + xInd * spacing[0] * scale,
                org[1] - yInd * spacing[1] * scale
              ],
              scale
            );
          } else if (typeof letters[x] == "function") {
            letters[x]([
              org[0] + xInd * spacing[0] * scale,
              org[1] - yInd * spacing[1] * scale
            ], scale);
          }
          break;
      }
      xInd += 1;
      continue;
    }
  }
  return;
};

// helper functions - added by Leo when porting piece from old library

function calculateBezierPoint(t, p0, p1, p2, p3) {
  let u = 1 - t
  let tt = t * t
  let uu = u * u
  let uuu = uu * u
  let ttt = tt * t

  let p = [uuu * p0[0], uuu * p0[1]] // u^3 * p0
  p[0] += 3 * uu * t * p1[0] // 3u^2t * p1
  p[1] += 3 * uu * t * p1[1]
  p[0] += 3 * u * tt * p2[0] // 3ut^2 * p2
  p[1] += 3 * u * tt * p2[1]
  p[0] += ttt * p3[0] // t^3 * p3
  p[1] += ttt * p3[1]

  return p
}

function findTForGivenX(xTarget, p0, p1, p2, p3) {
  let tolerance = 0.00001
  let t = 0.5 // Start with approximate solution
  let iterations = 0

  while (iterations < 1000) {
    // Max iterations to prevent infinite loop
    let p = calculateBezierPoint(t, p0, p1, p2, p3)
    let difference = p[0] - xTarget
    if (Math.abs(difference) < tolerance) {
      return t
    } else {
      t = t - difference / 2 // Approximate a new t value
    }
    iterations++
  }
  return t // Return the approximate t value
}

function getYForX(x, p0, p1, p2, p3) {
  let t = findTForGivenX(x, p0, p1, p2, p3)
  let p = calculateBezierPoint(t, p0, p1, p2, p3)
  return p[1]
}

function bezierEasing(initial, p0, p1, final) {
  return (x) =>
    getYForX(
      x,
      [0, initial],
      [Math.min(Math.max(0, p0[0]), 1), p0[1]],
      [Math.min(Math.max(0, p1[0]), 1), p1[1]],
      [1, final]
    )
}

function warp(turtle, fn, baseAngle = null) {
  const tValues = tValuesForPoints(turtle.path);
  const newPts = [];
  tValues.forEach((t, i) => {
    const pt = turtle.path.flat()[i];
    let angle = baseAngle ?? bt.getAngle(turtle.path, t);
    if (typeof angle === "function") {
      angle = angle(bt.getAngle(turtle.path, t));
    } else if (typeof angle === "number") {
      angle = angle;
    }
    const y = fn(t);
    const newPoint = rotate([0, y], angle);
    newPts.push([pt[0] + newPoint[0], pt[1] + newPoint[1]]);
  });
  turtle.path.flat().forEach((pt, i, arr) => {
    pt[0] = newPts[i][0];
    pt[1] = newPts[i][1];
  });
  return turtle

  function rotate(pt, angle, origin = [0, 0]) {
    let delta = angle / 180 * Math.PI;
    let hereX = pt[0] - origin[0];
    let hereY = pt[1] - origin[1];
    let newPoint = [
      hereX * Math.cos(delta) - hereY * Math.sin(delta) + origin[0],
      hereY * Math.cos(delta) + hereX * Math.sin(delta) + origin[1]
    ];
    return newPoint;
  }
}

function tValuesForPoints(polylines) {
  let totalLength = 0;
  let lengths = [];
  let tValues = [];
  let segmentLength = 0;
  for (let i = 0; i < polylines.length; i++) {
    let polyline2 = polylines[i];
    for (let j = 0; j < polyline2.length; j++) {
      if (j > 0) {
        let dx = polyline2[j][0] - polyline2[j - 1][0];
        let dy = polyline2[j][1] - polyline2[j - 1][1];
        segmentLength = Math.sqrt(dx * dx + dy * dy);
        totalLength += segmentLength;
      }
      lengths.push(segmentLength);
    }
  }
  let accumulatedLength = 0;
  for (let i = 0; i < lengths.length; i++) {
    accumulatedLength += lengths[i];
    tValues.push(accumulatedLength / totalLength);
  }
  return tValues;
};

// ============================ Text Engine End ============================

bt.simplify(original, 1 / detail);

// Idk why its backwards, but this fixes it
bt.rotate(original, 180);

bt.originate(original);

let max = 0;

bt.iteratePoints(original, (pt, t) => {
  max = Math.max(max, Math.max(Math.abs(pt[0]), Math.abs(pt[1])));
  return pt;
});

// Makes fit
bt.scale(original, (side - margin) / (2 * max));
bt.translate(original, [side / 2, side / 2]);

const blotToDot = new bt.Turtle();

for (let i = 0; i < original.length; i++) {
  let j = 1;
  bt.iteratePoints([original[i]], (pt, t) => {
    bt.join(blotToDot.path, shape(i + 3, shapeRadius * 2 * Math.tan(Math.PI / (i + 3)), pt));
    DrawText(j.toString(), [pt[0] + dotOffsetX, pt[1] + dotOffsetY], numberSize);
    j++;
    return pt;
  });
}

drawLines(blotToDot.path);
