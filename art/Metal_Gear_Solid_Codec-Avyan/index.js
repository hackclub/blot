/*
@title: DefinitelyInconspicous
@author: Avyan Mehra
@snapshot: HeroesFixed.jpg
*/
setDocDimensions(125, 125);

// Outlines

const outline = new bt.Turtle()
  .jump([25,25])
  .down()
  .setAngle(90)
  .forward(50)
  .right(90)
  .forward(100)
  .right(90)
  .forward(50)
  .right(90)
  .forward(101)

const pttOut = new bt.Turtle()
.jump([100,25])
.down()
.setAngle(90)
.forward(10)
.left(90)
.forward(50)
.left(90)
.forward(10)

const freqChange = new bt.Turtle()
.jump([35, 46])
.down()
.setAngle(120)
.forward(10)
.right(120)
.forward(10)
.right(120)
.forward(10)

const freqFrame = new bt.Turtle()
.jump([106,36])
.setAngle(90)
.down()
.forward(28)
.left(90)
.forward(62)
.left(90)
.forward(28)
.left(90)
.forward(62)

// Digits

const dig0 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7072*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
// fill end
.up()
.setAngle(0)
.forward(2.5)
.right(90)
.forward(0.7071)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.setAngle(90)
.forward(2.5 + 0.7071*2.75)
.left(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)


const dig1 = new bt.Turtle()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.right(45)
.forward(0.7071) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(0)
.forward(2.5 + 0.7071 + 0.7071)
.right(90)
.forward(0.7071)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(270)
.forward(2.5 + 0.7071*3.5)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(90)
.forward(0.7071*0.75)
.left(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)


const dig2 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(90)
.forward(2.5 + 0.7071 + 0.7071 + 0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
// fill end
.up()
.setAngle(0)
.forward(2.5)
.right(90)
.forward(0.7071)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(90)
.forward(0.7071*0.75)
.left(90)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end


const dig3 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
// fill end
.up()
.setAngle(0)
.forward(2.5 )
.right(90)
.forward(0.7071)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(270)
.forward(2.5 + 0.7071*3.5)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(90)
.forward(0.7071*0.75)
.left(90)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end


const dig4 = new bt.Turtle()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.right(45)
.forward(0.7071) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(0)
.forward(2.5 + 0.7071 + 0.7071)
.right(90)
.forward(0.7071)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(270)
.forward(2.5 + 0.7071*3.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.setAngle(90)
.forward(2.5 + 0.7071*2.75)
.left(90)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end


const dig5 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7072*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.right(135)
.forward(0.7071 + 2.5 + 0.7071 + 0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
// fill end
.up()
.setAngle(0)
.forward(2.5)
.right(90)
.forward(0.7071)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(270)
.forward(2.5 + 0.7071*3.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.setAngle(90)
.forward(2.5 + 0.7071*2.75)
.left(90)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end


const dig6 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7072*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.right(135)
.forward(0.7071 + 2.5 + 0.7071 + 0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
// fill end
.up()
.setAngle(0)
.forward(2.5)
.right(90)
.forward(0.7071)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.setAngle(90)
.forward(2.5 + 0.7071*2.75)
.left(90)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end


const dig7 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7072*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(0)
.forward(2.5 + 0.7071 + 0.7071)
.right(90)
.forward(0.7071)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(270)
.forward(2.5 + 0.7071*3.5)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(90)
.forward(0.7071*0.75)
.left(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)


const dig8 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7072*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
// fill end
.up()
.setAngle(0)
.forward(2.5)
.right(90)
.forward(0.7071)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.setAngle(90)
.forward(2.5 + 0.7071*2.75)
.left(90)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end


const dig9 = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7072*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(180)
.forward(2.5 + 0.7071*1.55)
.right(45)
//fill end
.up()
.right(45)
.forward(0.7071*0.5) // The 1 time you use trigo (1(cosine(45)) = x)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071*1.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.left(90)
.forward(0.7071)
.right(90)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
// fill end
.up()
.setAngle(0)
.forward(2.5)
.right(90)
.forward(0.7071)
.down()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.up()
.setAngle(270)
.forward(2.5 + 0.7071*3.5)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.right(90)
//fill end
.up()
.setAngle(90)
.forward(2.5 + 0.7071*2.75)
.left(90)
.down()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end


const Seg = new bt.Turtle()
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)


const filledSeg = new bt.Turtle()
//fill start
.left(45)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(90)
.forward(1)
.right(45)
.forward(2.5)
.right(45)
.forward(1)
.right(135)
.forward(2.5 + 2*0.7071)
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.left(90)
.forward(0.7071*(1/3))
.down()
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward((0.7071*2)-(0.7071*(2/3)))
.down()
.left(90)
.forward(2.5 + 2*(0.7071*(1/3)))
.up()
.left(90)
.forward(0.7071*(1/3))
.right(90)
.forward(0.7071*(1/3))
.left(180)
.down()
.forward(2.5 + 2*(0.7071*(2/3)))
.up()
.right(90)
.forward(0.7071*(1/3))
.right(90)
.forward(2.5 - (0.7071*(1/3)))
.right(90)
//fill end

const dec = new bt.Turtle()
.down()
.setAngle(90)
.forward(2)
.right(90)
.forward(2)
.right(90)
.forward(2)
.right(90)
.forward(2)
.right(135)
.forward(2.8284271247) // sqrt 8 (Pythagoras Theorem)


//Text
drawLines(bt.rotate(bt.offset(bt.text("PTT", [53,115], 1.5, [5, 4.5]),0.5),0))
drawLines(bt.rotate(bt.offset(bt.text("PTT", [53,115], 1.5, [5, 4.5]),0.8),0))
drawLines(bt.rotate(bt.offset(bt.text("PTT", [53,115], 1.5, [5, 4.5]),1),0))

drawLines(bt.rotate(bt.offset(bt.text("MEMORY", [42,75], 1.5, [5, 4.5]),0.5),0))
drawLines(bt.rotate(bt.offset(bt.text("MEMORY", [42,75], 1.5, [5, 4.5]),0.8),0))
drawLines(bt.rotate(bt.offset(bt.text("MEMORY", [42,75], 1.5, [5, 4.5]),1),0))
drawLines(bt.rotate(bt.translate(pttOut.lines(), [-13,88]),180))
//drawLines(bt.translate(bt.offset(bt.rotate(bt.text("180.15", [69,67], 1.5, [5, 4.5]), 180),0.5), [-23,-12]))

// Outlines

drawLines(bt.translate(outline.lines(), [-13,48]));
drawLines(bt.translate(pttOut.lines(), [-13,48]));
drawLines(bt.translate(bt.rotate(freqChange.lines(), -90), [-14,46]))
drawLines(bt.translate(bt.rotate(freqChange.lines(), 90), [68,46]))
drawLines(bt.translate(freqFrame.lines(), [-13,48]))
// drawLines(bt.translate(dig0.lines(), [10,10]))
// drawLines(bt.translate(dig1.lines(), [20,10]))
// drawLines(bt.translate(dig2.lines(), [30,10]))
// drawLines(bt.translate(dig3.lines(), [40,10]))
// drawLines(bt.translate(dig4.lines(), [50,10]))
// drawLines(bt.translate(dig5.lines(), [60,10]))
// drawLines(bt.translate(dig6.lines(), [70,10]))
// drawLines(bt.translate(dig7.lines(), [80,10]))
// drawLines(bt.translate(dig8.lines(), [90,10]))
// drawLines(bt.translate(dig9.lines(), [100,10]))

// Frequency Setter
drawLines(bt.rotate(bt.translate(dig1.lines(), [52,88]), 180));
bar(2, 74, 86)

var freqCount = 0;
var freq = 0.0;


while (freqCount != 4) {
  if (freqCount == 3) {
    freq += bt.randIntInRange(0, 9) / 100; 
  } else if (freqCount == 2) {
    freq += bt.randIntInRange(0, 9) / 10;  
  } else if (freqCount == 1) {
    freq += bt.randIntInRange(0, 9);       
  } else if (freqCount == 0) {
    freq += bt.randIntInRange(1, 9) * 10; 
  }
  freqCount += 1;
}


var digits = freq.toString().split('');  
var numbers = digits.map(Number);

var xCord = 59;
var loop = 0;

for (var i = 0; i < 5; i++) {
  var no = numbers[i];

  if (loop != 0) {
    xCord = 59 + (7 * loop);
  }

  if (no == 0 || no == null) {
    drawLines(bt.rotate(bt.translate(dig0.lines(), [xCord, 88]), 180));
  } else if (no == 1) {
    drawLines(bt.rotate(bt.translate(dig1.lines(), [xCord, 88]), 180));
  } else if (no == 2) {
    drawLines(bt.rotate(bt.translate(dig2.lines(), [xCord, 88]), 180));
  } else if (no == 3) {
    drawLines(bt.rotate(bt.translate(dig3.lines(), [xCord, 88]), 180));
  } else if (no == 4) {
    drawLines(bt.rotate(bt.translate(dig4.lines(), [xCord, 88]), 180));
  } else if (no == 5) {
    drawLines(bt.rotate(bt.translate(dig5.lines(), [xCord, 88]), 180));
  } else if (no == 6) {
    drawLines(bt.rotate(bt.translate(dig6.lines(), [xCord, 88]), 180));
  } else if (no == 7) {
    drawLines(bt.rotate(bt.translate(dig7.lines(), [xCord, 88]), 180));
  } else if (no == 8) {
    drawLines(bt.rotate(bt.translate(dig8.lines(), [xCord, 88]), 180));
  } else if (no == 9) {
    drawLines(bt.rotate(bt.translate(dig9.lines(), [xCord, 88]), 180));
  }

  loop += 1;
}

// Bars

function bar(length, xCor, yCor) {
const bar1 = new bt.Turtle()
.setAngle(90)
.forward(2)
.right(90)
.forward(length)
.right(90)
.forward(2)
.right(90)
.forward(length)
.up()
.right(90)
.forward(0.2)
.right(90)
.down()
.forward(length)
.up()
.left(90)
.forward(0.2)
.left(90)
.down()
.forward(length)
.up()
.right(90)
.forward(0.2)
.right(90)
.down()
.forward(length)
  .up()
.left(90)
.forward(0.2)
.left(90)
.down()
.forward(length)
.up()
.right(90)
.forward(0.2)
.right(90)
.down()
.forward(length).up()
.left(90)
.forward(0.2)
.left(90)
.down()
.forward(length)
.up()
.right(90)
.forward(0.2)
.right(90)
.down()
.forward(length).up()
.left(90)
.forward(0.2)
.left(90)
.down()
.forward(length)
.up()
.right(90)
.forward(0.2)
.right(90)
.down()
.forward(length)


drawLines(bt.translate(bt.rotate(bar1.lines(), 180), [xCor, yCor]))
  
}

function barWO(length, xCor, yCor, th) {
  const bar2 = new bt.Turtle()
    .setAngle(90)
    .forward(th)
    .right(90)
    .forward(length)
    .right(90)
    .forward(th)
    .right(90)
    .forward(length)
  drawLines(bt.translate(bar2.lines(), [xCor, yCor]))
}

const barWLines = bt.randIntInRange(4,13)

for (var i = 0; i < 12; i++) {
  if (i+1 <= barWLines) {
    bar(10 + (Math.pow(1.4, i)) , (31), (88 + (2 * i)))
  } else if (i+1 > barWLines) {
    barWO(10 + (Math.pow(1.4, i)) , (31), (88 + (2 * i)), 2)
  }
}

// Dialogue

const textList = ["What's the situation Snake?", "Where - I - Can - See - Ya", "A Hind D? Colonel What's a\nRussian Gunship doing here", "Snake? Snake? Snake!", "You Idiot!", "Nice to meet you, Snake", "It's easy to forget what\na sin is in the middle of\na battlefield.", "I’m just a man who’s\ngood at what he does:\nKilling.", "There are no heroes in war.\nThe only heroes I know are\neither dead or in prison.\nOne or the other.", "SNAAAAAAAAAAKE!!!"]
var chosen = textList[bt.randIntInRange(0,9)]
drawLines(bt.offset(bt.text(chosen, [7,46], 1.2, [3.6,9]), 0.5))

// Select
drawLines(bt.offset(bt.rotate(bt.text("PRESS SELECT TO EXIT", [10,60], 1.5, [3.6,9]), 0), 0.3))
drawLines(bt.offset(bt.rotate(bt.text("PRESS SELECT TO EXIT", [10,60], 1.5, [3.6,9]), 0), 0.5))
drawLines(bt.offset(bt.rotate(bt.text("PRESS SELECT TO EXIT", [10,60], 1.5, [3.6,9]), 0), 0.8))

