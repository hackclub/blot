---
import Layout from '../layouts/Layout.astro'
---

<script>
  import { OBJLoader } from 'three/addons/loaders/OBJLoader.js'
  import { MTLLoader } from 'three/addons/loaders/MTLLoader.js'
  import * as THREE from 'three'
  import { turtles } from '../lib/paths.js'
  import { object } from 'astro/zod'

  let objects = {
    x: [],
    y: []
  }

  // Set up scene
  const scene = new THREE.Scene()
  scene.background = null
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  )

  // Set up renderer
  const renderer = new THREE.WebGLRenderer({
    antialias: true,
    alpha: true
  })
  renderer.setSize(window.innerWidth, window.innerHeight)
  renderer.domElement.style.zIndex = '999'
  document.body.appendChild(renderer.domElement)

  // Set up light
  const light = new THREE.DirectionalLight(0xffffff)
  light.position.set(0.5, 0, 1)
  scene.add(light)

  // Add the parts
  const objLoader = new OBJLoader().setPath('/model/')
  const mtlLoader = new MTLLoader().setPath('/model/')

  camera.position.z = 0.3
  camera.position.x = -0.2
  camera.rotation.z = Math.PI
  camera.position.y = -0.25

  mtlLoader.load('feet.mtl', function (materials) {
    materials.preload()
    objLoader.setMaterials(materials).load(
      'feet.obj',
      function (object) {
        scene.add(object)
        objects.feet = object
      },
      function (xhr) {},
      function (error) {
        console.log(error)
      }
    )
  })

  mtlLoader.load('carriage.mtl', function (materials) {
    materials.preload()
    objLoader.setMaterials(materials).load(
      'carriage.obj',
      function (object) {
        scene.add(object)
        objects.carriage = object
      },
      function (xhr) {},
      function (error) {
        console.log(error)
      }
    )
  })

  mtlLoader.load('arm.mtl', function (materials) {
    materials.preload()
    objLoader.setMaterials(materials).load(
      'arm.obj',
      function (object) {
        scene.add(object)
        objects.arm = object
      },
      function (xhr) {},
      function (error) {
        console.log(error)
      }
    )
  })

  mtlLoader.load('penholder.mtl', function (materials) {
    materials.preload()
    objLoader.setMaterials(materials).load(
      'penholder.obj',
      function (object) {
        scene.add(object)
        objects.x.push(renderer.domElement.offsetWidth / 2)
        objects.y.push(renderer.domElement.offsetHeight / 2)
        objects.penholder = object
      },
      function (xhr) {},
      function (error) {
        console.log(error)
      }
    )
  })

  // Set up turtle
  let width, height
  const canvas = document.getElementById('canvas')
  const ctx = canvas.getContext('2d')
  ctx.strokeStyle = 'black'
  width = canvas.width = window.innerWidth
  height = canvas.height = window.innerHeight

  const turtle = turtles[0]
  let polyline = turtle.path[0]
  const config = {
    scale: 5,
    xoff: 70,
    yoff: -10,
    lineStart: 1,
    lineEnd: polyline.length
  }
  const paths = polyline.map(([x, y]) => [
    (x + config.xoff) * config.scale,
    (y + config.yoff) * config.scale
  ])
  let i = config.lineStart + 1
  let j = config.lineStart + 1

  function dist(x1: number, y1: number, x2: number, y2: number) {
    return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
  }

  const lerp = (x, y, a) => x * (1 - a) + y * a
  const clamp = (a, min = 0, max = 1) => Math.min(max, Math.max(min, a))
  const invlerp = (x, y, a) => clamp((a - x) / (y - x))
  const range = (x1, y1, x2, y2, a) => lerp(x2, y2, invlerp(x1, y1, a))

  function moveTo(x: number, y: number) {
    let mappedX = range(
      0,
      width,
      -camera.position.z / config.scale,
      camera.position.z / config.scale,
      x
    )
    let xoff = range(
      0,
      width,
      -camera.position.z / config.scale,
      camera.position.z / config.scale,
      config.xoff
    )
    let mappedY = range(
      0,
      height,
      -camera.position.y / config.scale,
      camera.position.y / config.scale,
      y
    )
    let yoff = range(
      0,
      height,
      -camera.position.y / config.scale,
      camera.position.y / config.scale,
      config.yoff
    )
    objects.carriage.position.x = mappedX
    objects.arm.position.x = mappedX
    objects.penholder.position.x = mappedX
    objects.arm.position.y = mappedY
    objects.penholder.position.y = mappedY
    objects.x.push(x)
    objects.y.push(y)
  }

  function animate() {
    requestAnimationFrame(animate)
    if (
      i < config.lineEnd - 1 &&
      objects.arm != undefined &&
      objects.penholder != undefined &&
      objects.carriage != undefined &&
      objects.feet != undefined
    ) {
      i += 10 / dist(paths[j - 1][0], paths[j - 1][1], paths[j][0], paths[j][1])
      j = Math.floor(i)
      ctx.clearRect(0, 0, width, height)
      let [x, y] = paths[j]
      // increase i a bit if we're out of the screen
      if (x < 0 || x > width || y < 0 || y > height) i++
      if (j === 0) ctx.moveTo(x, y)
      else
        ctx.lineTo(
          lerp(paths[j - 1][0], x, i - j),
          lerp(paths[j - 1][1], y, i - j)
        )
      ctx.stroke()
      moveTo(x, y)
    }
    renderer.render(scene, camera)
  }

  animate()
</script>

<style is:global lang="scss">
  body {
    background-size: 40px 40px;
    background-image: linear-gradient(to right, #ddd 1px, transparent 1px),
      linear-gradient(to bottom, #ddd 1px, transparent 1px);
    min-height: 100vh;
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
  }

  #canvas {
    z-index: 999;
  }

  main {
    position: relative;
    z-index: 2;
    padding: 1rem 0;
  }

  h1 {
    font-family: var(--font-sans);
    font-size: 4rem;
    max-width: 50vw;
    margin-inline: 4rem;
    line-height: 1;
    letter-spacing: -2px;

    span {
      color: var(--primary);
    }
  }
</style>

<Layout title="Blot" description="Blot out the world!">
  <canvas id="canvas"></canvas>
  <!-- 
    <main>
        <section>
            <h1>
                <span>Blot</span> is the plotting tool that everyone can make
                art for.
            </h1>
            <h1>Draw some art, get a <span>Blot</span>.</h1>
        </section>
    </main>
    -->
</Layout>
